import { createNotification, NotificationType, NotificationPriority } from '../store/slices/notificationSlice';
import { AppDispatch } from '../store';
import { Invoice, InvoiceItem } from '../store/slices/invoiceSlice';
import { Material } from '../store/slices/materialSlice';

// Unit-specific low stock thresholds
const UNIT_THRESHOLDS: Record<string, number> = {
  'viên': 2000,
  'kg': 50,
  'm': 50,
  'm²': 50,
  'm³': 10,
  'lít': 20,
  'thùng': 10,
  'cuộn': 10,
  'tấm': 10,
  'bộ': 5,
  'bao': 50,
  'cái': 30
};

// Helper function to get threshold for a specific unit
const getThresholdForUnit = (unit: string): number => {
  return UNIT_THRESHOLDS[unit] || 10; // Default threshold of 10 if unit not found
};

// Utility function to send payment success notification
export const sendPaymentSuccessNotification = async (
  dispatch: AppDispatch,
  invoice: Invoice,
  paymentAmount: number,
  paymentMethod: string
) => {
  try {
    const title = `Thanh toán thành công - Hóa đơn ${invoice.invoiceNumber}`;
    const message = `Khách hàng ${invoice.customerName} đã thanh toán ${paymentAmount.toLocaleString('vi-VN')} VNĐ qua ${paymentMethod}. Tổng tiền hóa đơn: ${invoice.totalAmount.toLocaleString('vi-VN')} VNĐ.`;
    
    await dispatch(createNotification({
      title,
      message,
      type: NotificationType.INVOICE,
      priority: NotificationPriority.MEDIUM,
      relatedEntityId: invoice._id,
      relatedEntityType: 'invoice',
      metadata: {
        invoiceNumber: invoice.invoiceNumber,
        customerName: invoice.customerName,
        paymentAmount,
        totalAmount: invoice.totalAmount,
        paymentMethod,
        paymentStatus: invoice.paymentStatus
      },
      isAutoGenerated: true
    })).unwrap();
    
    console.log('Payment success notification sent');
  } catch (error) {
    console.error('Failed to send payment success notification:', error);
  }
};

// Utility function to check low stock and send notifications
export const checkLowStockAndNotify = async (
  dispatch: AppDispatch,
  invoice: Invoice,
  materials: Material[]
) => {
  try {
    const lowStockItems: { material: Material; currentQuantity: number; threshold: number }[] = [];
    
    // Check each item in the invoice for low stock
    console.log('Checking low stock for invoice items:', invoice.items.length);
    for (const invoiceItem of invoice.items) {
      const material = materials.find(m => m._id === invoiceItem.materialId);
      if (material) {
        // Get unit-specific threshold
        const lowStockThreshold = getThresholdForUnit(material.unit);
        
        console.log(`Checking material: ${material.name}, current quantity: ${material.quantity}, unit: ${material.unit}, threshold: ${lowStockThreshold}`);
        
        if (material.quantity <= lowStockThreshold) {
          console.log(`Low stock detected for ${material.name}: ${material.quantity} <= ${lowStockThreshold} (${material.unit})`);
          lowStockItems.push({
            material,
            currentQuantity: material.quantity,
            threshold: lowStockThreshold
          });
        }
      } else {
        console.log(`Material not found for invoice item: ${invoiceItem.materialId}`);
      }
    }
    
    // Send notification for each low stock item
    for (const lowStockItem of lowStockItems) {
      const title = `Cảnh báo tồn kho thấp - ${lowStockItem.material.name}`;
      const message = `Sản phẩm "${lowStockItem.material.name}" chỉ còn ${lowStockItem.currentQuantity} ${lowStockItem.material.unit}. Dưới ngưỡng cảnh báo ${lowStockItem.threshold} ${lowStockItem.material.unit}. Vui lòng nhập hàng sớm.`;
      
      await dispatch(createNotification({
        title,
        message,
        type: NotificationType.MATERIAL,
        priority: lowStockItem.currentQuantity === 0 ? NotificationPriority.URGENT : NotificationPriority.HIGH,
        relatedEntityId: lowStockItem.material._id,
        relatedEntityType: 'material',
        metadata: {
          materialName: lowStockItem.material.name,
          currentQuantity: lowStockItem.currentQuantity,
          threshold: lowStockItem.threshold,
          unit: lowStockItem.material.unit,
          invoiceNumber: invoice.invoiceNumber,
          customerName: invoice.customerName
        },
        isAutoGenerated: true
      })).unwrap();
    }
    
    if (lowStockItems.length > 0) {
      console.log(`Low stock notifications sent for ${lowStockItems.length} items:`, lowStockItems.map(item => ({
        materialName: item.material.name,
        currentQuantity: item.currentQuantity,
        threshold: item.threshold
      })));
    } else {
      console.log('No low stock items found');
    }
  } catch (error) {
    console.error('Failed to check low stock and send notifications:', error);
  }
};

// Utility function to send invoice completion notification
export const sendInvoiceCompletionNotification = async (
  dispatch: AppDispatch,
  invoice: Invoice
) => {
  try {
    const title = `Hóa đơn hoàn thành - ${invoice.invoiceNumber}`;
    const message = `Hóa đơn ${invoice.invoiceNumber} của khách hàng ${invoice.customerName} đã được thanh toán đầy đủ. Tổng giá trị: ${invoice.totalAmount.toLocaleString('vi-VN')} VNĐ.`;
    
    await dispatch(createNotification({
      title,
      message,
      type: NotificationType.INVOICE,
      priority: NotificationPriority.MEDIUM,
      relatedEntityId: invoice._id,
      relatedEntityType: 'invoice',
      metadata: {
        invoiceNumber: invoice.invoiceNumber,
        customerName: invoice.customerName,
        totalAmount: invoice.totalAmount,
        paymentStatus: invoice.paymentStatus,
        status: invoice.status
      },
      isAutoGenerated: true
    })).unwrap();
    
    console.log('Invoice completion notification sent');
  } catch (error) {
    console.error('Failed to send invoice completion notification:', error);
  }
};

// Utility function to send payment partial notification
export const sendPaymentPartialNotification = async (
  dispatch: AppDispatch,
  invoice: Invoice,
  paymentAmount: number,
  remainingAmount: number
) => {
  try {
    const title = `Thanh toán một phần - Hóa đơn ${invoice.invoiceNumber}`;
    const message = `Khách hàng ${invoice.customerName} đã thanh toán ${paymentAmount.toLocaleString('vi-VN')} VNĐ. Còn lại ${remainingAmount.toLocaleString('vi-VN')} VNĐ.`;
    
    await dispatch(createNotification({
      title,
      message,
      type: NotificationType.INVOICE,
      priority: NotificationPriority.LOW,
      relatedEntityId: invoice._id,
      relatedEntityType: 'invoice',
      metadata: {
        invoiceNumber: invoice.invoiceNumber,
        customerName: invoice.customerName,
        paymentAmount,
        remainingAmount,
        totalAmount: invoice.totalAmount,
        paymentStatus: invoice.paymentStatus
      },
      isAutoGenerated: true
    })).unwrap();
    
    console.log('Payment partial notification sent');
  } catch (error) {
    console.error('Failed to send payment partial notification:', error);
  }
};

// Utility function to send invoice creation notification
export const sendInvoiceCreationNotification = async (
  dispatch: AppDispatch,
  invoice: Invoice
) => {
  try {
    const title = `Hóa đơn mới được tạo - ${invoice.invoiceNumber}`;
    const message = `Hóa đơn mới ${invoice.invoiceNumber} đã được tạo cho khách hàng ${invoice.customerName}. Tổng giá trị: ${invoice.totalAmount.toLocaleString('vi-VN')} VNĐ.`;
    
    await dispatch(createNotification({
      title,
      message,
      type: NotificationType.INVOICE,
      priority: NotificationPriority.MEDIUM,
      relatedEntityId: invoice._id,
      relatedEntityType: 'invoice',
      metadata: {
        invoiceNumber: invoice.invoiceNumber,
        customerName: invoice.customerName,
        totalAmount: invoice.totalAmount,
        paymentStatus: invoice.paymentStatus,
        status: invoice.status,
        itemCount: invoice.items.length
      },
      isAutoGenerated: true
    })).unwrap();
    
    console.log('Invoice creation notification sent');
  } catch (error) {
    console.error('Failed to send invoice creation notification:', error);
  }
};

// Utility function to send invoice update notification
export const sendInvoiceUpdateNotification = async (
  dispatch: AppDispatch,
  invoice: Invoice
) => {
  try {
    const title = `Hóa đơn đã được cập nhật - ${invoice.invoiceNumber}`;
    const message = `Hóa đơn ${invoice.invoiceNumber} của khách hàng ${invoice.customerName} đã được cập nhật. Tổng giá trị: ${invoice.totalAmount.toLocaleString('vi-VN')} VNĐ.`;
    
    await dispatch(createNotification({
      title,
      message,
      type: NotificationType.INVOICE,
      priority: NotificationPriority.LOW,
      relatedEntityId: invoice._id,
      relatedEntityType: 'invoice',
      metadata: {
        invoiceNumber: invoice.invoiceNumber,
        customerName: invoice.customerName,
        totalAmount: invoice.totalAmount,
        paymentStatus: invoice.paymentStatus,
        status: invoice.status,
        itemCount: invoice.items.length
      },
      isAutoGenerated: true
    })).unwrap();
    
    console.log('Invoice update notification sent');
  } catch (error) {
    console.error('Failed to send invoice update notification:', error);
  }
};
